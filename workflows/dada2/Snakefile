##
# Global
##

rule get_paths:
    input:
        bamsepath=expand("{bamsepath}", bamsepath=config['bamsepath']),

##
# Primer trimming
##

rule trim:
    input:
        read1="{projectpath}/0-Data/{sample}_1.fastq",
        read2="{projectpath}/0-Data/{sample}_2.fastq"
    threads: 1
    output:
        read1="{projectpath}/1-Trimmed/{sample}_1.fastq",
        read2="{projectpath}/1-Trimmed/{sample}_2.fastq"
    params:
        primer1=expand("{primer1}", primer1=config['primer1']),
        primer2=expand("{primer2}", primer2=config['primer2'])
    shell:
        """
        mkdir -p {wildcards.projectpath}/1-Trimmed
        module load anaconda3/4.4.0 && python {rules.get_paths.input.bamsepath}/bin/bamse-trimming.py -i1 {input.read1} -i2 {input.read2} -o1 {output.read1} -o2 {output.read2} -p1 {params.primer1} -p2 {params.primer2}
        """

##
# Read filtering and trimming
##

rule filter:
    input:
        read1="{projectpath}/1-Trimmed/{sample}_1.fastq",
        read2="{projectpath}/1-Trimmed/{sample}_2.fastq"
    threads: 1
    output:
        read1="{projectpath}/2-Filtered/{sample}_1.fastq",
        read2="{projectpath}/2-Filtered/{sample}_2.fastq"
        directory("{projectpath}/2-Filtered/")
    params:
        maxN=expand("{maxN}", maxN=config['maxN']),
        maxEE=expand("{maxEE}", maxEE=config['maxEE']),
        truncQ=expand("{truncQ}", truncQ=config['truncQ']),
        truncLen=expand("{truncLen}", truncLen=config['truncLen'])
    shell:
        """
        mkdir -p {wildcards.projectpath}/2-Filtered
        module load tools gcc intel/perflibs R/4.0.0 && Rscript {rules.get_paths.input.bamsepath}/bin/bamse-filtering.R --i1 {input.read1} --i2 {input.read2} --o1 {output.read1} --o2 {output.read2} --truncQ {params.truncQ} --truncLen {params.truncLen} --maxN {params.maxN} --maxEE {params.maxEE}
        """

##
# Error learning and dada2
##

rule dada2:
    input:
        dir="{projectpath}/2-Filtered"
    threads: 40
    output:
        asvs="{projectpath}/ASVs.fasta",
        taxa="{projectpath}/ASV_taxa.txt",
        counts="{projectpath}/ASV_counts.txt"
    params:
        overlap=expand("{overlap}", overlap=config['overlap']),
        taxonomy=expand("{taxonomy}", taxonomy=config['taxonomy'])
    shell:
        """
        module load tools gcc intel/perflibs R/4.0.0 && Rscript {rules.get_paths.input.bamsepath}/bin/bamse-dada2.R -d {input.dir} -o {params.overlap} -t {params.taxonomy} -a {output.asvs} -c {output.counts} -x {output.taxa}
        """

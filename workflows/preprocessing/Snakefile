import time

##
# Global
##

rule get_paths:
    input:
        bamsepath=expand("{bamsepath}", bamsepath=config['bamsepath']),
        parampath=expand("{parampath}", parampath=config['parampath']),
        logpath=expand("{logpath}", logpath=config['logpath'])

##
# Primer trimming
##

rule trim_log:
    run:
        logfile=open(logpath,"a+")
        current_time = time.strftime("%m.%d.%y %H:%M", time.localtime())
        logfile.write("{0} |    Trimming primers \r\n".format(current_time))
        logfile.close()

rule trim:
    input:
        read1="{projectpath}/0-Data/{sample}_1.fastq",
        read2="{projectpath}/0-Data/{sample}_2.fastq"
    threads: 1
    output:
        read1="{projectpath}/1-Primertrimmed/{sample}_1.fastq",
        read2="{projectpath}/1-Primertrimmed/{sample}_2.fastq"
    params:
        primer1=expand("{primer1}", primer1=config['primer1']),
        primer2=expand("{primer2}", primer2=config['primer2'])
    shell:
        """
        mkdir -p {wildcards.projectpath}/1-Primertrimmed
        python {rules.get_paths.input.bamsepath}/bin/bamse-primertrim.py -i1 {input.read1} -i2 {input.read2} -o1 {output.read1} -o2 {output.read2} -p1 {params.primer1} -p2 {params.primer2}
        """

##
# Measure overlaps and remove non-overlapping reads
##

rule overlapfilter:
    input:
        read1="{projectpath}/1-Primertrimmed/{sample}_1.fastq",
        read2="{projectpath}/1-Primertrimmed/{sample}_2.fastq"
    threads: 1
    output:
        read1="{projectpath}/2-Filtered/{sample}_1.fastq",
        read2="{projectpath}/2-Filtered/{sample}_2.fastq",
        trimlength1="{projectpath}/2-Filtered/{sample}_1.trimlength",
        trimlength2="{projectpath}/2-Filtered/{sample}_2.trimlength"
    shell:
        """
        mkdir -p {wildcards.projectpath}/2-Filtered
        sh {rules.get_paths.input.bamsepath}/bin/bamse-overlapfilter.sh -f {input.read1} -r {input.read2} -a {output.read1} -b {output.read2} -h {output.trimlength1} -j {output.trimlength2}
        """

##
# Trim read 1 according to overlap
##

rule overlapfilter1:
    input:
        read="{projectpath}/2-Filtered/{sample}_1.fastq",
        lengths="{projectpath}/2-Filtered/{sample}_1.trimlength"
    threads: 1
    output:
        read="{projectpath}/3-Trimmed/{sample}_1.fastq"
    shell:
        """
        mkdir -p {wildcards.projectpath}/2-Filtered
        python {rules.get_paths.input.bamsepath}/bin/bamse-overlaptrim.py -i {input.read} -l {input.lengths} -o {output.read}
        """

##
# Trim read 2 according to overlap
##

rule overlapfilter2:
    input:
        read="{projectpath}/2-Filtered/{sample}_2.fastq",
        lengths="{projectpath}/2-Filtered/{sample}_2.trimlength"
    threads: 1
    output:
        read="{projectpath}/3-Trimmed/{sample}_2.fastq"
    shell:
        """
        mkdir -p {wildcards.projectpath}/3-Trimmed
        python {rules.get_paths.input.bamsepath}/bin/bamse-overlaptrim.py -i {input.read} -l {input.lengths} -o {output.read}
        """

##
# Global
##

rule get_paths:
    input:
        bamsepath=expand("{bamsepath}", bamsepath=config['bamsepath']),
        parampath=expand("{parampath}", parampath=config['parampath'])
##
# Primer trimming
##

rule trim:
    input:
        read1="{projectpath}/0-Data/{sample}_1.fastq",
        read2="{projectpath}/0-Data/{sample}_2.fastq"
    threads: 1
    output:
        read1="{projectpath}/1-Trimmed/{sample}_1.fastq",
        read2="{projectpath}/1-Trimmed/{sample}_2.fastq"
    params:
        primer1=expand("{primer1}", primer1=config['primer1']),
        primer2=expand("{primer2}", primer2=config['primer2'])
    shell:
        """
        mkdir -p {wildcards.projectpath}/1-Trimmed
        module load tools anaconda3/4.4.0 && python {rules.get_paths.input.bamsepath}/bin/bamse-trimming.py -i1 {input.read1} -i2 {input.read2} -o1 {output.read1} -o2 {output.read2} -p1 {params.primer1} -p2 {params.primer2}
        """

##
# Quality profiling
##

rule quality:
    input:
        read1="{projectpath}/1-Trimmed/{sample}_1.fastq",
        read2="{projectpath}/1-Trimmed/{sample}_2.fastq"
    threads: 1
    output:
        sampleparam="{projectpath}/1-Trimmed/{sample}.param"
    params:
        parampath=expand("{parampath}", parampath=config['parampath']),
        ampliconlength=expand("{ampliconlength}", ampliconlength=config['ampliconlength']),
        minq=expand("{minq}", minq=config['minq'])
    shell:
        """
        module unload perl && module load tools perl/5.30.2 && sh {rules.get_paths.input.bamsepath}/bin/bamse-qualprof.sh -s {wildcards.sample} -f {input.read1} -r {input.read2} -l {params.ampliconlength} -q {params.minq} -c {output.sampleparam} -p {rules.get_paths.input.parampath}
        """

##
# Read filtering and trimming
##

rule filter:
    input:
        read1="{projectpath}/1-Trimmed/{sample}_1.fastq",
        read2="{projectpath}/1-Trimmed/{sample}_2.fastq",
        sampleparam="{projectpath}/1-Trimmed/{sample}.param"
    threads: 1
    output:
        read1="{projectpath}/2-Filtered/{sample}_1.fastq",
        read2="{projectpath}/2-Filtered/{sample}_2.fastq"
    shell:
        """
        mkdir -p {wildcards.projectpath}/2-Filtered
        module load tools gcc intel/perflibs R/4.0.0 && Rscript {rules.get_paths.input.bamsepath}/bin/bamse-filtering.R --i1 {input.read1} --i2 {input.read2} --o1 {output.read1} --o2 {output.read2} --params {input.sampleparam}
        """
